<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Data science and Machine learning in Python - 1. Review of Python</title>
      <link href="/2022/09/11/Python%20Crash%20Course/"/>
      <url>/2022/09/11/Python%20Crash%20Course/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Comprehensive-Syntax-Review"><a href="#Python-Comprehensive-Syntax-Review" class="headerlink" title="Python Comprehensive Syntax Review"></a>Python Comprehensive Syntax Review</h1><hr><ul><li>Data types<ul><li>Numbers</li><li>Strings</li><li>Printing</li><li>Lists</li><li>Dictionaries</li><li>Booleans</li><li>Tuples </li><li>Sets</li></ul></li><li>Comparison Operators</li><li>if, elif, else Statements</li><li>for Loops</li><li>while Loops</li><li>range()</li><li>list comprehension</li><li>functions</li><li>lambda expressions</li><li>map and filter</li><li>methods</li></ul><hr><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>0.5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">4</span></span><br></pre></td></tr></table></figure><pre><code>16</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> % <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> % <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> + <span class="number">3</span>) * (<span class="number">5</span> + <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>50</code></pre><h3 id="Variable-Assignment"><a href="#Variable-Assignment" class="headerlink" title="Variable Assignment"></a>Variable Assignment</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Can not start with number or special characters</span></span><br><span class="line">name_of_var = <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z = x + y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;single quotes&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>&#39;single quotes&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;double quotes&quot;</span></span><br></pre></td></tr></table></figure><pre><code>&#39;double quotes&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; wrap lot&#x27;s of other quotes&quot;</span></span><br></pre></td></tr></table></figure><pre><code>&quot; wrap lot&#39;s of other quotes&quot;</code></pre><h3 id="Printing"><a href="#Printing" class="headerlink" title="Printing"></a>Printing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>&#39;hello&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><pre><code>hello</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">12</span></span><br><span class="line">name = <span class="string">&#x27;Sam&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My number is: &#123;one&#125;, and my name is: &#123;two&#125;, and more &#123;one&#125;&#x27;</span>.<span class="built_in">format</span>(one=num,two=name))</span><br></pre></td></tr></table></figure><pre><code>My number is: 12, and my name is: Sam, and more 12</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My number is: &#123;&#125;, and my name is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(num,name))</span><br></pre></td></tr></table></figure><pre><code>My number is: 12, and my name is: Sam</code></pre><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;hi&#x27;</span>,<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><pre><code>[&#39;hi&#39;, 1, [1, 2]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list.append(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list</span><br></pre></td></tr></table></figure><pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;a&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;b&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><pre><code>[&#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[:<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>[&#39;a&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[<span class="number">0</span>] = <span class="string">&#x27;NEW&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list</span><br></pre></td></tr></table></figure><pre><code>[&#39;NEW&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,[<span class="string">&#x27;target&#x27;</span>]]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>[4, 5, [&#39;target&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest[<span class="number">3</span>][<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>[&#39;target&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;target&#39;</code></pre><h3 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;item1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;item2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">&#x27;key1&#x27;</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;item1&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">&#x27;key 3&#x27;</span>] = <span class="string">&#x27;item3&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">&#x27;key 3&#x27;</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;item3&#39;</code></pre><p>Nested dictionaries allowed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2 = &#123;<span class="string">&#x27;k1&#x27;</span>:d, <span class="string">&#x27;k2&#x27;</span>: d&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d2) <span class="comment"># dictionary does not store any order but just keys and elements.</span></span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;k1&#39;: &#123;&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;, &#39;key 3&#39;: &#39;item3&#39;&#125;, &#39;k2&#39;: &#123;&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;, &#39;key 3&#39;: &#39;item3&#39;&#125;&#125;</code></pre><h3 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h3 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p>Tuples are inmutable.</p><p>You cannot change elemetns in tuples, here is an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t[<span class="number">0</span>] = <span class="string">&#x27;NEW&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-44-97e4e33b36c2&gt; in &lt;module&gt;()----&gt; 1 t[0] = &#39;NEW&#39;TypeError: &#39;tuple&#39; object does not support item assignment</code></pre><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3&#125;</code></pre><p>Set function gives you a set of unique elements</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3&#125;</code></pre><p>Functions under SETS:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3, 5&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.remove(<span class="number">5</span>) <span class="comment">#Notre here: remove/add function mutates the set s.</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a>Comparison Operators</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt; <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &gt;= <span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= <span class="number">4</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span> <span class="comment"># &#x27;=&#x27; is an assignment operator</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hi&#x27;</span> == <span class="string">&#x27;bye&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h2 id="Logic-Operators"><a href="#Logic-Operators" class="headerlink" title="Logic Operators"></a>Logic Operators</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> &gt; <span class="number">2</span>) <span class="keyword">and</span> (<span class="number">2</span> &lt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> &gt; <span class="number">2</span>) <span class="keyword">or</span> (<span class="number">2</span> &lt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> == <span class="number">2</span>) <span class="keyword">or</span> (<span class="number">2</span> == <span class="number">3</span>) <span class="keyword">or</span> (<span class="number">4</span> == <span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h2 id="if-elif-else-Statements"><a href="#if-elif-else-Statements" class="headerlink" title="if,elif, else Statements"></a>if,elif, else Statements</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yep!&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Yep!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yep!&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>yep!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;last&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>first</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;last&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>last</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">3</span> == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;middle&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Last&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>middle</code></pre><p>Furthermore:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">3</span>&gt;<span class="number">2</span>) + <span class="number">1</span>); <span class="comment"># 3&gt;2 gives us true, and true + 1 gives us 2.</span></span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">3</span>&gt;<span class="number">4</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p>Follwoing example shows 1 and 0 are the embeded val for bool.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bool is false&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bool is true&#x27;</span>);</span><br></pre></td></tr></table></figure><pre><code>bool is true</code></pre><h2 id="for-Loops"><a href="#for-Loops" class="headerlink" title="for Loops"></a>for Loops</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> seq: <span class="comment"># for loop allows you to iterate in a sequence;</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Yep&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>YepYepYepYepYep</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> jelly <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(jelly+jelly)</span><br></pre></td></tr></table></figure><pre><code>246810</code></pre><h2 id="while-Loops"><a href="#while-Loops" class="headerlink" title="while Loops"></a>while Loops</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;i is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>i is: 1i is: 2i is: 3i is: 4</code></pre><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>range(0, 5)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>01234</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)) <span class="comment">#make it a squence;</span></span><br></pre></td></tr></table></figure><pre><code>[0, 1, 2, 3, 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)) <span class="comment">#making a list from 0 to 10 with 2 stepss</span></span><br></pre></td></tr></table></figure><pre><code>[0, 2, 4, 6, 8]</code></pre><h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a>list comprehension</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">    out.append(item**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[item**<span class="number">2</span> <span class="keyword">for</span> item <span class="keyword">in</span> x] <span class="comment"># list comprehension</span></span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16]</code></pre><h2 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">param1=<span class="string">&#x27;default&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Docstring goes here.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(param1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func <span class="comment"># reports back the object</span></span><br></pre></td></tr></table></figure><pre><code>&lt;function __main__.my_func&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func() <span class="comment"># calls the function</span></span><br></pre></td></tr></table></figure><pre><code>default</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func(<span class="string">&#x27;new param&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>new param</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func(param1=<span class="string">&#x27;new param&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>new param</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out = square(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><h2 id="lambda-expressions"><a href="#lambda-expressions" class="headerlink" title="lambda expressions"></a>lambda expressions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">times2</span>(<span class="params">var</span>):</span><br><span class="line">    <span class="keyword">return</span> var*<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">times2(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> var: var*<span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>&lt;function __main__.&lt;lambda&gt;(var)&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="keyword">lambda</span> var : var*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(t(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><h2 id="map-and-filter"><a href="#map-and-filter" class="headerlink" title="map and filter"></a>map and filter</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(times2,seq) <span class="comment"># maps a function to each elemetn int the list </span></span><br></pre></td></tr></table></figure><pre><code>&lt;map at 0x105316748&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(times2,seq))</span><br></pre></td></tr></table></figure><pre><code>[2, 4, 6, 8, 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> var: var*<span class="number">2</span>,seq)) <span class="comment"># lambda expression saves code writing</span></span><br></pre></td></tr></table></figure><pre><code>[2, 4, 6, 8, 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span>(<span class="keyword">lambda</span> item: item%<span class="number">2</span> == <span class="number">0</span>,seq)</span><br></pre></td></tr></table></figure><pre><code>&lt;filter at 0x105316ac8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> item: item%<span class="number">2</span> == <span class="number">0</span>,seq)) <span class="comment"># if fucntion iterating on each element.</span></span><br></pre></td></tr></table></figure><pre><code>[2, 4]</code></pre><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="string">&#x27;hello my name is Sam&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.lower() <span class="comment"># you can type st. and see all available methods</span></span><br></pre></td></tr></table></figure><pre><code>&#39;hello my name is sam&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.upper()</span><br></pre></td></tr></table></figure><pre><code>&#39;HELLO MY NAME IS SAM&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.split() <span class="comment"># splits the string on the white space if there&#x27;s no input.</span></span><br></pre></td></tr></table></figure><pre><code>[&#39;hello&#39;, &#39;my&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Sam&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweet = <span class="string">&#x27;Go Sports! #Sports&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweet.split(<span class="string">&#x27;#&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>[&#39;Go Sports! &#39;, &#39;Sports&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweet.split(<span class="string">&#x27;#&#x27;</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;Sports&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.keys()</span><br></pre></td></tr></table></figure><pre><code>dict_keys([&#39;key2&#39;, &#39;key1&#39;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.items()</span><br></pre></td></tr></table></figure><pre><code>dict_items([(&#39;key2&#39;, &#39;item2&#39;), (&#39;key1&#39;, &#39;item1&#39;)])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst.pop() <span class="comment">#randomly pops out last item</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst</span><br></pre></td></tr></table></figure><pre><code>[1, 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst</span><br></pre></td></tr></table></figure><pre><code>[2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> [<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p>Tuple unpacking:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>), (<span class="number">5</span>,<span class="number">6</span>)]</span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>135</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> x :</span><br><span class="line">    <span class="built_in">print</span>(b);</span><br></pre></td></tr></table></figure><pre><code>246</code></pre>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>About Me</title>
      <link href="/2022/09/05/About%20me/"/>
      <url>/2022/09/05/About%20me/</url>
      
        <content type="html"><![CDATA[<h1 id="Hi-I-am-Rongyan-Yuan-Here-is-a-brief-introduction-about-me"><a href="#Hi-I-am-Rongyan-Yuan-Here-is-a-brief-introduction-about-me" class="headerlink" title="Hi! I am Rongyan Yuan. Here is a brief introduction about me!"></a>Hi! I am Rongyan Yuan. Here is a brief introduction about me!</h1><h3 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h3><ul><li><p>Graduated from the University of Waterloo in 2022 with a bachelor degree in <strong>Mathematical Finance and minor in Statistics</strong></p></li><li><p>My area of study mainly covers topics including: <strong>quantitative finance, computer science, statistics, and pure mathematics</strong></p></li><li><p>I am currently taking courses on <strong>Certified Financial Analyst, Data Science, Machine Learning in Python, Quantitative Trading</strong>, and <strong>C++</strong> on Udemy</p></li></ul><h3 id="Work-Expeinence"><a href="#Work-Expeinence" class="headerlink" title="Work Expeinence"></a>Work Expeinence</h3><h4 id="Data-analyst-in-Zhengzhou-Commodity-Exchange-Futures-amp-Derivatives-Research-Institute"><a href="#Data-analyst-in-Zhengzhou-Commodity-Exchange-Futures-amp-Derivatives-Research-Institute" class="headerlink" title="Data analyst in Zhengzhou Commodity Exchange Futures &amp; Derivatives Research Institute"></a><strong>Data analyst</strong> in Zhengzhou Commodity Exchange Futures &amp; Derivatives Research Institute</h4><ul><li><p>Developed a solid understanding of China’s commodity futures market by analyzing various futures contracts based on the dynamics of commodity market</p></li><li><p>Efficiently applied Python to conduct data analysis including ratio and index calculation of futures traded in Zhengzhou Commodity Exchange to assist the team to rate futures for internal purpose </p></li><li><p>Demonstrated strong mathematical and writing skills by composing a research report on momentum trading to examine the correlation between contracts’ prices and strategy’s penetration rate to determine potential index fluctuations of the futures traded in Zhengzhou Commodity Exchange</p></li></ul><h4 id="Financial-Analyst-in-Central-China-Securities"><a href="#Financial-Analyst-in-Central-China-Securities" class="headerlink" title="Financial Analyst in Central China Securities"></a><strong>Financial Analyst</strong> in Central China Securities</h4><ul><li><p>Collaborated with the team to conduct secondary market research on the SSE market to determine profitable stocks in different market sectors and assisted team to create investing reports for outside users</p></li><li><p>Evaluated each customer’s investing budget and risk tolerance to recommend ideal financial products by providing customized investing services</p></li><li><p>Illustrated strong teamwork and communication skill through explaining financial analysis in easy words and recommending the optimal portfolio to clients as a team in investing pitch presentations</p></li></ul><h3 id="Interests"><a href="#Interests" class="headerlink" title="Interests"></a>Interests</h3><ul><li><strong>Taekwondo</strong> has been one of my greatest interests in my lifetime. Back in high school, I was leading the school-sponsored taekwondo club. I highly think of the roles I played back then, including managing club members on daily basis, preparing shows for school ceremonies, etc. Here are some pics of our performance below:</li></ul><p>Show commencement:<br>        <span class="lazyload-img-span">        <img              data-src="https://img.zzedu.net.cn/images/xwzx/2017/10/18/big2BD9819CC1361CDCBA1D5BA5E26F0B4B.jpg" >        </sapn>      </p><p>Me leading style show:</p><p>        <span class="lazyload-img-span">        <img              data-src="https://img.zzedu.net.cn/images/xwzx/2017/10/18/big3C0F601E24DFFC07B49B4DE2E6826176.jpg" >        </sapn>      </p><p>Me leading boxing show:<br>        <span class="lazyload-img-span">        <img              data-src="https://img.zzedu.net.cn/images/xwzx/2017/10/18/big0B72DC25663E530B195171AF3F626E07.jpg" >        </sapn>      </p><ul><li><strong>Men’s physique training</strong> is the area I show the greatest interest in as well. I have been learning, applying, and practicing physique training for 5 years, and gained a lot of experience. Furthermore, I am also into powerlifting, since body strength holds an unspoken attraction to me</li></ul>]]></content>
      
      
      <categories>
          
          <category> AboutMe </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quantitative Trading - 1.Basics of Financial Markets</title>
      <link href="/2022/08/25/Quantitative-Trading/"/>
      <url>/2022/08/25/Quantitative-Trading/</url>
      
        <content type="html"><![CDATA[<h1 id="Basics-of-Financial-Markets"><a href="#Basics-of-Financial-Markets" class="headerlink" title="Basics of Financial Markets"></a>Basics of Financial Markets</h1><h2 id="Stock"><a href="#Stock" class="headerlink" title="Stock"></a>Stock</h2><h3 id="Basics-of-Stock"><a href="#Basics-of-Stock" class="headerlink" title="Basics of Stock"></a>Basics of Stock</h3><ul><li><p>Stock is the ownership of a small piece of a company</p></li><li><p>This entitles the owner of the stock to a proportion of the corporation’s asset and profits equal to how much stock they own</p></li><li><p><u> Shares are the units of stocks </u></p></li><li><p>Investment can be as shares of the company</p></li></ul><h3 id="Price-of-Stock"><a href="#Price-of-Stock" class="headerlink" title="Price of Stock"></a>Price of Stock</h3><ul><li><p>General concept of how stock works: companies raise capital by borrowing or issuing bonds or go public</p></li><li><p>Companies have to issue stock via the Stock Exchange, which has a list of companies that want to raise capital</p></li><li><p>Brokers firms can provide the platform where investors can buy or sell stocks</p></li><li><p><u> Stock price fluctuates mainly due to supply and demand </u></p></li><li><p>Stock price is usually expressed as S(t) and very similar to a <u>Random Walk</u></p></li><li><p><u> The risk of investment correlates the volatility of stock price, <strong>measure of the dispersion</strong></u></p></li></ul><h2 id="Commodities"><a href="#Commodities" class="headerlink" title="Commodities"></a>Commodities</h2><ul><li><p>Commodities are raw products such as <strong>gold, oil, natural gas</strong></p></li><li><p>Commodities, such as oil, are <strong>EXTREMELY VOLATILE</strong>, which is why we have <strong>future contracts</strong></p></li><li><p>Commodity usually fluctuates like random walk</p></li><li><p><u>Commodity typically rise when inflation is accelerating</u>, which is why we include it in portfolio</p></li></ul><h3 id="Future-Contract"><a href="#Future-Contract" class="headerlink" title="Future Contract"></a>Future Contract</h3><ul><li><p>Example: The major cost for airlines is oil, so they use <strong>oil futures</strong> to protect them from rising oil prices</p></li><li><p>Future Contracts and commodities are traded in Future Market, such as New York Mercantile Exchange, <strong>Primary Market</strong></p></li></ul><h3 id="What-if-we-cannot-invest-into-a-commodity-directly"><a href="#What-if-we-cannot-invest-into-a-commodity-directly" class="headerlink" title="What if we cannot invest into a commodity directly"></a>What if we cannot invest into a commodity directly</h3><ul><li><p>Invest into a company that heavily relies on the given commodity</p></li><li><p>Example: gold and shares of gold mines may be correlated</p></li><li><p>It is also positively correlated with companies’ performance so that we Use Pairs Trading Strategy</p></li></ul><h2 id="Currencies-and-Forex"><a href="#Currencies-and-Forex" class="headerlink" title="Currencies and Forex"></a>Currencies and Forex</h2><h3 id="Currencies-Definiton"><a href="#Currencies-Definiton" class="headerlink" title="Currencies Definiton"></a>Currencies Definiton</h3><ul><li><p>Exchange rate is the rate at which one national currency will be exchanged for another</p></li><li><p>Currency is worth another currency</p></li><li><p><u>Government and central banks can influence currencies and exchange rates</u></p></li></ul><h3 id="Currency-Traits"><a href="#Currency-Traits" class="headerlink" title="Currency Traits"></a>Currency Traits</h3><p>Why do exchange rates fluctuate?</p><ul><li><p>Exchange rate rise and fall due to fluctuation of <u>supply and demand</u></p></li><li><p>Exchange rates are usually similar to a <strong>random walk</strong></p></li></ul><h3 id="FOREX-Market"><a href="#FOREX-Market" class="headerlink" title="FOREX Market"></a>FOREX Market</h3><ul><li><p>International Currencies are traded in FOREX market</p></li><li><p>Investors use <strong>FOREX Broker Firms</strong> that have the ability to buy and sell currencies.</p></li></ul><h2 id="Factors-affecting-exchange-rates"><a href="#Factors-affecting-exchange-rates" class="headerlink" title="Factors affecting exchange rates"></a>Factors affecting exchange rates</h2><ul><li><p>interest rates: interest rate is major factor that can be <strong>manipulated by the central bank of a country. Investors will lend money to the banks of the given country for higher returns</strong></p></li><li><p>Therefore, higher interest rates indicate higher exchange rates</p></li><li><p>Money supply: the money supply created by the central bank by printing too much currency may trigger inflation. Investors do not like inflation so they will leave the currency that can push the value of a currency down</p></li><li><p>Therefore, higher money supply may lead to lower exchange rates</p></li><li><p>Financial stability: the financial stability and <u>economic growth</u> of a given country have a <u>huge impact on the value of the exchange rate</u></p></li><li><p>Therefore, better economic performance leads to higher exchange rate</p></li><li><p>There are arbitrage opportunities when currencies are mispriced</p></li></ul><h2 id="Long-and-Short-position"><a href="#Long-and-Short-position" class="headerlink" title="Long and Short position"></a>Long and Short position</h2><ul><li>Long Position: You own the security, and investors maintain long position in the expectation that the stock will increase in value in the future, such that:</li></ul><center>S(t<sub>T</sub>) > S(t<sub>0</sub>)</center><ul><li>Short position means you sell the security, with expectation that stock will decrease such that:</li></ul><center>S(t<sub>T</sub>) < S(t<sub>0</sub>)</center><ul><li><p>Short Position leads to another action: <strong>Short Selling</strong></p></li><li><p><strong>Short Selling</strong>: sell something you don’t actually own</p></li><li><p><strong>Short Selling</strong> is when an <u>investor borrows shares and immediately sells them</u>, expecting he or she can buy them up later at a lower price and return them to the lender and pocket the difference, and the profit will be:</p></li></ul><center> S(t<sub>0</sub>) - S(t<sub>T</sub>), given that S(t<sub>0</sub>) > S(t<sub>T</sub>) </center><h3 id="Risks-with-Short-and-Long-Positions"><a href="#Risks-with-Short-and-Long-Positions" class="headerlink" title="Risks with Short and Long Positions"></a>Risks with Short and Long Positions</h3><ul><li><p>Shorting is <strong>more risker than</strong> long positions</p></li><li><p>For example, for lone position, you can only lose 100% of your money; however, <u>there is no limit of how much you can lose for short selling</u>, because there is <strong>no limit</strong> for a given stock to increase, and the lose of short position will be:</p></li></ul><center> S(t<sub>T</sub>) - S(t<sub>0</sub>), given that S(t<sub>0</sub>) < S(t<sub>T</sub>) </center><ul><li>S(t<sub>T</sub>) could go really high meaning you have to pay more to buy it back and return</li></ul><h3 id="Market-Basics"><a href="#Market-Basics" class="headerlink" title="Market Basics"></a>Market Basics</h3><ul><li><p><strong>Bear-ish Market</strong>: is when the market experiences <u>stable prices declines</u></p></li><li><p>Therefore, securities fall for a sustained period of time, where we can <u>make profit with short positions</u></p></li><li><p><strong>Bull-ish Market</strong>: is when the market experiences stable price increase, where we can <u>make profit with long positions</u></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> quant </category>
          
          <category> quant trading </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>READ ME</title>
      <link href="/2022/08/08/README/"/>
      <url>/2022/08/08/README/</url>
      
        <content type="html"><![CDATA[<h3 id="Note-on-blog-reading"><a href="#Note-on-blog-reading" class="headerlink" title="Note on blog reading"></a>Note on blog reading</h3><ul><li>Each blog has few categories, where the first few categories are main categories: <strong>quant, math, and cs</strong>, and the very last category indicates <strong>name of the topic</strong></li><li>Each main category will only include the first post of each topic</li><li>Note that: quant stands for category of quantitative finance; math stands for mathematics; cs stands for computer science</li><li>Every post of each topic will differentiated by the suffix that is composed of two elements: <strong>order number</strong> and <strong>content name</strong>, which can help you locate and read posts accordingly</li><li><u>More will be coming soon here</u></li></ul>]]></content>
      
      
      <categories>
          
          <category> quant </category>
          
          <category> math </category>
          
          <category> cs </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
